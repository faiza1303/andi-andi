//////////////////////////////////////////////////////////////////////////////////
// Traitement Contraste des couleurs sur les textes et leurs arrière-plans
//////////////////////////////////////////////////////////////////////////////////

// Fonction pour récupérer les données de contraste d'un élément
function getContrastData(fgElement) {
    var disabled = isThisDisabled(fgElement);
    // Variables pour vérifier si l'élément est semi-transparent ou a une opacité appliquée
    var semiTransparency = false;
    var opacity = false;


    	//Get background color
	var bgColor = new Color($(fgElement).css("background-color"));
	var bgElement = getBgElement(fgElement);

   
   	//Get foreground color
	var fgColor = new Color($(fgElement).css("color"));
	if(fgColor.alpha < 1){
		semiTransparency = true;
		fgColor = fgColor.overlayOn(bgColor);
	}

	var contrast = fgColor.contrast(bgColor);
	var ratio = contrast.ratio;

	var cANDI_data = {
		bgColor:			bgColor,
		fgColor:			fgColor,
		contrast:			contrast,
		ratio: 				ratio,
		semiTransparency:	semiTransparency,
		opacity:			opacity,
		bgImage:			$(bgElement).css("background-image"),
		size:				parseFloat($(fgElement).css("font-size")),
		weight:				$(fgElement).css("font-weight"),
		family:				$(fgElement).css("font-family"),
		minReq:				undefined,
		result:				undefined,
		disabled:			disabled
	};

	if(!disabled) //Run the contrast test
		contrastTest(cANDI_data);

	//send cANDI_data back
	return cANDI_data;

	//This function does the contrast test
	function contrastTest(cANDI_data){

		//AA Requirements (default)
		var ratio_small = wcagLevel.smallTextReqRatio;
		var ratio_large = wcagLevel.largeTextReqRatio;

		//Set minReq (minimum requirement)
		cANDI_data.minReq = ratio_small;

		if(cANDI_data.size >= 24)
			cANDI_data.minReq = ratio_large;
		else if(cANDI_data.size >= 18.66 && cANDI_data.weight >= 700) //700 is where bold begins, 18.66 is approx equal to 14pt
			cANDI_data.minReq = ratio_large;

		if(cANDI_data.bgImage === "none" && !cANDI_data.opacity){
			//No, Display PASS/FAIL Result and Requirement Ratio
			if(cANDI_data.ratio >= cANDI_data.minReq){
				cANDI_data.result = "PASS";
			}
			else{
				cANDI_data.result = "FAIL";
			}
		}
	}

	//This function will recursively get the element that contains the background-color or background-image.
	function getBgElement(element, recursion){
		if(!disabled)
			disabled = isThisDisabled(element);

		if(parseInt($(element).css("opacity")) < 1)
			opacity = true;

		if($(element).css("background-image") !== "none"){
			return element;
		}
		else{
			//Store this background color
			var thisBgColor = new Color($(element).css("background-color"));

			//Overlay the accumulated bgColor with the the previous background color that was semi-transparent
			if(recursion)
				bgColor = bgColor.overlayOn(thisBgColor);
			else
				bgColor = thisBgColor;

			if($(element).is("html")){
				//transparent or semi-transparent
				if(thisBgColor.alpha < 1){
					bgColor = bgColor.overlayOn(Color.WHITE);
					if(thisBgColor.alpha > 0)
						semiTransparency = true;
				}
			}
			else if(thisBgColor.alpha < 1){
				//Look at parent element
				if(thisBgColor.alpha > 0)
					semiTransparency = true;
				return getBgElement($(element).parent(), true);
			}
			return element;
		}
	}

	function isThisDisabled(element){
		return !!($(element).prop("disabled") || $(element).attr("aria-disabled") === "true");
	}
}

//This function checks for additional hiding techniques and returns true if it has one
	//Techniques such as font-size:0, large text-indent, overflow:hidden width small height and width
	function hasAdditionalHidingTechniques(element){
		if( //font-size:0
			parseInt($(element).css("font-size")) === 0 ||
			//text-indent is pushing the element off the page
			(
			$(element).css("text-indent") != "0" || $(element).css("text-indent") != "0px") && parseInt($(element).css("text-indent")) < -998 ||
			//overflow:hidden and height:1 width:1
			$(element).css("overflow")=="hidden" && (parseInt($(element).css("height"))<=1 || parseInt($(element).css("width"))<=1)
			)
		{
			return true; //has an additional hiding technique
		}
		return false;
	}

	//This function returns true if one of the immediate children has text
	function hasTextExcludingChildren(element){
		//Loop through the child nodes of this element looking for text
		var l = element.childNodes.length;
		if(l){//has child nodes
			for(var x=0; x<l; x++){
				if(element.childNodes[x].nodeType === Node.TEXT_NODE && element.childNodes[x].nodeValue.trim() !== ""){
					return true; //one of the immediate children has text
				}
			}
		}
		else if($(element).is("input:not([type=radio],[type=checkbox])")){//element has no child nodes but still can contain text
			return true;
		}
		return false;
	}
 


Math.round = (function(){
	var round = Math.round;
	return function (number, decimals){
		decimals = +decimals || 0;
		var multiplier = Math.pow(10, decimals);
		return round(number * multiplier) / multiplier;
	};
})();

// Simple class for handling sRGB colors
(function(){

var _ = self.Color = function(rgba){
	if(rgba === 'transparent'){
		rgba = [0,0,0,0];
	}
	else if(typeof rgba === 'string'){
		var rgbaString = rgba;
		rgba = rgbaString.match(/rgba?\(([\d.]+), ([\d.]+), ([\d.]+)(?:, ([\d.]+))?\)/);

		if(rgba){
			rgba.shift();
		}
		else {
			throw new Error('Invalid string: ' + rgbaString);
		}
	}

	if(rgba[3] === undefined){
		rgba[3] = 1;
	}

	rgba = rgba.map(function (a){ return Math.round(a, 3); });

	this.rgba = rgba;
};

_.prototype = {
	get rgb (){
		return this.rgba.slice(0,3);
	},

	get alpha (){
		return this.rgba[3];
	},

	set alpha (alpha){
		this.rgba[3] = alpha;
	},

	get luminance (){
		// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
		var rgba = this.rgba.slice();

		for(var i=0; i<3; i++){
			var rgb = rgba[i];

			rgb /= 255;

			rgb = rgb < 0.03928 ? rgb / 12.92 : Math.pow((rgb + 0.055) / 1.055, 2.4);

			rgba[i] = rgb;
		}

		return 0.2126 * rgba[0] + 0.7152 * rgba[1] + 0.0722 * rgba[2];
	},

	get inverse (){
		return new _([
			255 - this.rgba[0],
			255 - this.rgba[1],
			255 - this.rgba[2],
			this.alpha
		]);
	},

	toString: function(){
		return 'rgb' + (this.alpha < 1? 'a' : '') + '(' + this.rgba.slice(0, this.alpha >= 1? 3 : 4).join(', ') + ')';
	},

	clone: function(){
		return new _(this.rgba);
	},

	//Overlay a color over another
	overlayOn: function (color){
		var overlaid = this.clone();

		var alpha = this.alpha;

		if(alpha >= 1){
			return overlaid;
		}

		//Modified code (Mod 1): (moved this line before the for loop)
		overlaid.rgba[3] = alpha + (color.rgba[3] * (1 - alpha));

		for(var i=0; i<3; i++){
			//Modified code (Mod 2): (divide by the overlaid alpha if not zero) (Formula: https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending)
			if(overlaid.rgba[3] !== 0)
				overlaid.rgba[i] = (overlaid.rgba[i] * alpha + color.rgba[i] * color.rgba[3] * (1 - alpha)) / overlaid.rgba[3];
			else
			//Modified code (Mod 2) End
				overlaid.rgba[i] = overlaid.rgba[i] * alpha + color.rgba[i] * color.rgba[3] * (1 - alpha);
		}

		//Original code (Mod 1):
		//overlaid.rgba[3] = alpha + (color.rgba[3] * (1 - alpha));

		return overlaid;
	},

	contrast: function (color){
		// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
		var alpha = this.alpha;

		if(alpha >= 1){
			if(color.alpha < 1){
				color = color.overlayOn(this);
			}

			var l1 = this.luminance + 0.05,
				l2 = color.luminance + 0.05,
				ratio = l1/l2;

			if(l2 > l1){
				ratio = 1 / ratio;
			}

			//Original Code (Mod 3):
			//ratio = Math.round(ratio, 1);
			//Modified code (Mod 3): increased the contrast rounding precision to two decimals
			ratio = Math.round(ratio, 2);

			return {
				ratio: ratio,
				error: 0,
				min: ratio,
				max: ratio
			};
		}

		// If we’re here, it means we have a semi-transparent background
		// The text color may or may not be semi-transparent, but that doesn't matter

		var onBlack = this.overlayOn(_.BLACK),
		    onWhite = this.overlayOn(_.WHITE),
		    contrastOnBlack = onBlack.contrast(color).ratio,
		    contrastOnWhite = onWhite.contrast(color).ratio;

		var max = Math.max(contrastOnBlack, contrastOnWhite);

		// This is here for backwards compatibility and not used to calculate
		// `min`.  Note that there may be other colors with a closer luminance to
		// `color` if they have a different hue than `this`.
		var closest = this.rgb.map(function(c, i){
			return Math.min(Math.max(0, (color.rgb[i] - c * alpha)/(1-alpha)), 255);
		});

		closest = new _(closest);

		var min = 1;
		if(onBlack.luminance > color.luminance){
			min = contrastOnBlack;
		}
		else if(onWhite.luminance < color.luminance){
			min = contrastOnWhite;
		}

		return {
			ratio: Math.round((min + max) / 2, 2),
			error: Math.round((max - min) / 2, 2),
			min: min,
			max: max,
			closest: closest,
			farthest: onWhite == max? _.WHITE : _.BLACK
		};
	}
};

_.BLACK = new _([0,0,0]);
_.GRAY = new _([127.5, 127.5, 127.5]);
_.WHITE = new _([255,255,255]);

})();
